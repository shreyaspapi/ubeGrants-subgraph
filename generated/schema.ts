// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GrantMilestoneDelivery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save GrantMilestoneDelivery entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GrantMilestoneDelivery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GrantMilestoneDelivery", id.toString(), this);
  }

  static load(id: string): GrantMilestoneDelivery | null {
    return store.get(
      "GrantMilestoneDelivery",
      id
    ) as GrantMilestoneDelivery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get state(): boolean {
    let value = this.get("state");
    return value.toBoolean();
  }

  set state(value: boolean) {
    this.set("state", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }
}

export class Grant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Grant entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Grant entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Grant", id.toString(), this);
  }

  static load(id: string): Grant | null {
    return store.get("Grant", id) as Grant | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grantId(): BigInt {
    let value = this.get("grantId");
    return value.toBigInt();
  }

  set grantId(value: BigInt) {
    this.set("grantId", Value.fromBigInt(value));
  }

  get state(): BigInt | null {
    let value = this.get("state");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set state(value: BigInt | null) {
    if (value === null) {
      this.unset("state");
    } else {
      this.set("state", Value.fromBigInt(value as BigInt));
    }
  }

  get ipfs(): string | null {
    let value = this.get("ipfs");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipfs(value: string | null) {
    if (value === null) {
      this.unset("ipfs");
    } else {
      this.set("ipfs", Value.fromString(value as string));
    }
  }

  get grantee(): Bytes | null {
    let value = this.get("grantee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set grantee(value: Bytes | null) {
    if (value === null) {
      this.unset("grantee");
    } else {
      this.set("grantee", Value.fromBytes(value as Bytes));
    }
  }

  get milestoneAmounts(): Array<BigInt> | null {
    let value = this.get("milestoneAmounts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set milestoneAmounts(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("milestoneAmounts");
    } else {
      this.set(
        "milestoneAmounts",
        Value.fromBigIntArray(value as Array<BigInt>)
      );
    }
  }

  get milestoneDeliveries(): Array<string> | null {
    let value = this.get("milestoneDeliveries");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set milestoneDeliveries(value: Array<string> | null) {
    if (value === null) {
      this.unset("milestoneDeliveries");
    } else {
      this.set(
        "milestoneDeliveries",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get nextPayout(): BigInt {
    let value = this.get("nextPayout");
    return value.toBigInt();
  }

  set nextPayout(value: BigInt) {
    this.set("nextPayout", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ContractOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ContractOwner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ContractOwner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ContractOwner", id.toString(), this);
  }

  static load(id: string): ContractOwner | null {
    return store.get("ContractOwner", id) as ContractOwner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
